from aiogram import types, Dispatcher
from assets.antispam import antispam
from assets.transform import transform_int as tr
from commands.help import CONFIG
from user import BFGuser, BFGconst

CONFIG['help_rz'] += '''\n\n‚õìÔ∏è‚Äçüí• –ö—Ä–∞—Ñ—Ç:
   ‚ö°Ô∏è –ö—Ä–∞—Ñ—Ç—ã
   üìå –ö—Ä–∞—Ñ—Ç [–Ω–æ–º–µ—Ä]'''

CRAFTING = {
	1: {
		'name': '–ó–æ–ª–æ—Ç–æ–π –ê–π—Ñ–æ–Ω',
		'assets': {
			'iron': 2500,
			'gold': 1200,
		},
		'payout': 10_000_000_000
	},
	2: {
		'name': '–ê–ª–º–∞–∑–Ω—ã–π –º–µ—á',
		'assets': {
			'gold': 2750,
			'diamond': 1500
		},
		'payout': 200_000_000_000
	},
	3: {
		'name': '–ê–º–µ—Ç–∏—Å—Ç–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∞',
		'assets': {
			'amestit': 750,
			'emeralds': 250
		},
		'payout': 750_000_000_000
	},
	4: {
		'name': '–ê–∫–≤–∞–º–∞—Ä–∏–Ω–æ–≤—ã–π —â–∏—Ç',
		'assets': {
			'aquamarine': 200,
			'matter': 100,
		},
		'payout': 1_000_000_000_000
	},
	5: {
		'name': '–ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
		'assets': {
			'plasma': 150,
			'nickel': 50,
		},
		'payout': 50_00_000_000_000
	},
	6: {
		'name': '–¢–∏—Ç–∞–Ω–æ–≤—ã–π —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç',
		'assets': {
			'titanium': 50,
			'cobalt': 10,
		},
		'payout': 5_500_000_000_000_000
	},
}

remj = {
	'iron': '‚õìÔ∏è –ñ–µ–ª–µ–∑–∞',
	'gold': 'üåï –ó–æ–ª–æ—Ç–∞',
	'diamond': 'üíé –ê–ª–º–∞–∑–æ–≤',
	'amestit': 'üéÜ –∞–º–µ—Ç–∏—Å—Ç–∞',
	'emeralds': 'üçÄ –ò–∑—É–º—Ä—É–¥–æ–≤',
	'aquamarine': 'üí† –ê–∫–≤–∞–º–∞—Ä–∏–Ω–æ–≤',
	'matter': 'üåå –ú–∞—Ç–µ—Ä–∏–∏',
	'plasma': 'üí• –ü–ª–∞–∑–º—ã',
	'nickel': 'ü™ô –ù–∏–∫–µ–ª—è',
	'titanium': '‚öôÔ∏è –¢–∏—Ç–∞–Ω–∏—É–º–∞',
	'cobalt': 'üß™ –ö–æ–±–∞–ª—å—Ç–∞',
}


@antispam
async def crafts(message: types.Message, user: BFGuser):
	txt = f'{user.url}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã:\n'
	
	for num, i in enumerate(CRAFTING.values(), start=1):
		assets = '\n'.join(f"    {remj[res]}: {amount}" for res, amount in i['assets'].items())
		txt += f"\n{num}. {i['name']}:\n{assets}\n"
	
	txt += '\n–î–ª—è –∫—Ä–∞—Ñ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ "–ö—Ä–∞—Ñ—Ç [–Ω–æ–º–µ—Ä]"'
	await message.answer(txt)
	
	
	
@antispam
async def craft(message: types.Message, user: BFGuser):
	win, lose = BFGconst.emj()
	
	try:
		n = int(message.text.split()[1])
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞ {lose}')
		return
	
	data = CRAFTING.get(n)
	
	if not data:
		await message.answer(f'{user.url}, —Ç–∞–∫–æ–≥–æ –∫—Ä–∞—Ñ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return
	
	resources = {
		"iron": user.mine.iron,
		"gold": user.mine.gold,
		"diamond": user.mine.diamond,
		"amethyst": user.mine.amestit,
		"aquamarine": user.mine.aquamarine,
		"emeralds": user.mine.emeralds,
		"matter": user.mine.matter,
		"plasma": user.mine.plasma,
		"nickel": user.mine.nickel,
		"titanium": user.mine.titanium,
		"cobalt": user.mine.cobalt,
	}
	
	for resours, summ in data['assets'].items():
		if int(resources[resours]) < int(summ):
			await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <code>{remj[resours]}</code> {lose}')
			return
	
	for resours, summ in data['assets'].items():
		await resources[resours].upd(summ, '-')
	
	await user.balance.upd(data['payout'], '+')
	await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {data["name"]} –Ω–∞ {tr(data["payout"])}$ {win}')
	

def register_handlers(dp: Dispatcher):
	dp.register_message_handler(crafts, lambda message: message.text.lower() == '–∫—Ä–∞—Ñ—Ç—ã')
	dp.register_message_handler(craft, lambda message: message.text.lower().startswith('–∫—Ä–∞—Ñ—Ç'))


MODULE_DESCRIPTION = {
	'name': '‚õìÔ∏è‚Äçüí• –ö—Ä–∞—Ñ—Ç',
	'description': '–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞ –∑–∞ —Ä—É–¥—É.'
}