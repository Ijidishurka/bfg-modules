import asyncio
import random
from bot import bot
from aiogram import types, Dispatcher
from commands.db import conn, cursor, url_name
from commands.games.main import game_check
from assets.transform import transform_int as tr
from assets.antispam import antispam
from decimal import Decimal

from commands.help import CONFIG
from user import BFGuser, BFGconst

CONFIG['help_game'] += '''
   üî´ –û—Ö–æ—Ç–∞ [—Å—Ç–∞–≤–∫–∞]
   ü™ô –ú–æ–Ω–µ—Ç–∫–∞ [–æ—Ä—ë–ª/—Ä–µ—à–∫–∞] [—Å—Ç–∞–≤–∫–∞]
   üé£ –†—ã–±–∞–ª–∫–∞ [—Å—Ç–∞–≤–∫–∞]
   üé≤ –†—É–ª–µ—Ç–∫–∞ [—Ç–∏–ø] [—Å—Ç–∞–≤–∫–∞]
   üöÄ –ö—Ä–∞—à [—Å—Ç–∞–≤–∫–∞] [—Ö]'''


async def update_balance(user_id: int, amount: int | str, operation="subtract") -> None:
	balance = cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]
	
	if operation == 'add':
		new_balance = Decimal(str(balance)) + Decimal(str(amount))
	else:
		new_balance = Decimal(str(balance)) - Decimal(str(amount))
	
	new_balance = "{:.0f}".format(new_balance)
	cursor.execute('UPDATE users SET balance = ? WHERE user_id = ?', (str(new_balance), user_id))
	cursor.execute('UPDATE users SET games = games + 1 WHERE user_id = ?', (user_id,))
	conn.commit()


@antispam
async def oxota(message: types.Message, user: BFGuser):
	summ = await game_check(message, user, index=1)
	
	if not summ:
		return
	
	wins = [
		"üí•üêó | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–∞–±–∞–Ω–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üí•üêä | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫—Ä–æ–∫–æ–¥–∏–ª–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üí•üêøÔ∏èüå≤ | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ–±—Ä–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üí•üê∞ | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∑–∞–π—Ü–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üí•üêÖ | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä—ã—Å—å, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üí•üêò | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–ª–æ–Ω–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$"
	]
	
	losses = [
		"üí•ü¶î | –ó–≤–µ–∑–¥–∞ —ç—Ç–æ—Ç —ë–∂–∏–∫! –í—ã –¥–∞–∂–µ –Ω–µ —Å–æ–æ–±—Ä–∞–∑–∏–ª–∏, —á—Ç–æ —Ç–æ—á–Ω–æ –ø–æ–ø–∞–ª–∏ –≤ —Ü–µ–ª—å. –ù–æ –≤–æ—Ç —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç –¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ–µ –æ—Ä—É–∂–∏–µ –∏ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ, –≤–µ–¥—å –∑–∞–∑–≤–µ–∑–¥–∏–ª—Å—è - –ø—Ä–æ–∏–≥—Ä–∞–ª!",
		"üí•üò∑ | –í–æ—Ç –∫ —á–µ—Ä—Ç—É, –≤—ã –∑–∞—Ä–∞–∑–∏–ª–∏—Å—å –≤ –±–æ–ª—å–Ω–∏—Ü–µ! –≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, —Å–∏–¥–∏—Ç–µ –¥–æ–º–∞ –∏ –ª–µ—á–∏—Ç–µ—Å—å.",
		"üí•üíÄ | –ü–æ–ø–∞–ª–∏ –ø–æ –Ω–µ—Ñ–æ—Ä—É... –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥—É—Ä–Ω–æ–π –ø—Ä–∏–≤—ã–∫, –∏ –≤—ã —Ç—É—Å–∏—Ç–µ –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –≤ –æ–¥–Ω–æ–π –∏–∑ –º–µ—Å—Ç–Ω—ã—Ö –≥—Ä—è–∑–Ω—ã—Ö –±–∞—Ä–¥–∞–∫–æ–≤.",
		"üí•üêª | –ë–æ–ª—å—à–æ–π –∏ —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–¥—å... —Ç–æ–ª—å–∫–æ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ. –ù–æ –≤–æ—Ç –æ–Ω, –Ω–∞ –≤–∞—Å —Å–º–æ—Ç—Ä–∏—Ç –≥–ª–∞–∑–∞–º–∏, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –≥–Ω–µ–≤–æ–º!",
		"üí•üê∫ | –í–æ–ª–∫–∏ - –Ω–∞—à–∏ –±—Ä–∞—Ç—å—è –º–µ–Ω—å—à–∏–µ. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –ø–æ–±–µ–¥–∏—Ç—å, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑–æ–∫.",
		"üí•ü¶ä | –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ª–∏—Å—É - —ç—Ç–æ —É—Å–ø–µ—Ö! –ù–æ –±—É–¥–µ—Ç –ª—É—á—à–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–º–µ–Ω–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–µ –ø–æ–π–¥–µ—Ç–µ –Ω–∞ –æ—Ö–æ—Ç—É –Ω–∞ —ç—Ç–∏—Ö –º–∏–ª—ã—Ö –∑–≤–µ—Ä—å–∫–æ–≤ –≤ –Ω–∞—à–µ–º –º–∏—Ä–µ."
	]
	
	chance = random.random()
	
	if chance < 0.45:
		su = int(summ * 0.5)
		txt = random.choice(wins).format(tr(su))
		await update_balance(user.user_id, su, operation='add')
	elif chance < 0.5:
		txt = 'üí•‚ùé | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏...  –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å.'
	else:
		txt = random.choice(losses)
		await update_balance(user.user_id, summ, operation='subtract')
	
	msg = await message.answer("üí• | –í—ã—Å—Ç—Ä–µ–ª... –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤ –∫–æ–≥–æ –≤—ã –ø–æ–ø–∞–ª–∏")
	await asyncio.sleep(2)
	await bot.edit_message_text(chat_id=msg.chat.id, message_id=msg.message_id, text=txt)


@antispam
async def monetka(message: types.Message, user: BFGuser):
	win, lose = BFGconst.emj()
	
	try:
		action = message.text.lower().split()[1]
		action = '–æ—Ä—ë–ª' if action == '–æ—Ä–µ–ª' else action
	except:
		return
	
	summ = await game_check(message, user, index=2)
	
	if not summ or action not in ['—Ä–µ—à–∫–∞', '–æ—Ä—ë–ª']:
		return
	
	win = random.choices(['—Ä–µ—à–∫–∞', '–æ—Ä—ë–ª', '—Ä–µ–±—Ä–æ'], weights=[49, 49, 2], k=1)[0]
	win2 = "—Ä–µ—à–∫—É" if win == "—Ä–µ—à–∫–∞" else '–æ—Ä–ª–∞'
	
	if win == action:
		summ = int(summ * 2)
		await update_balance(user.user_id, summ, operation='add')
		txt = f"üéâ {user.url}, —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ {win2}, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +{tr(summ)}$! {win}"
	elif win == '—Ä–µ–±—Ä–æ':
		txt = f"üò≤ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, {user.url}! –ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ —Ä–µ–±—Ä–æ–º! –¢–∞–∫–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ."
	else:
		await update_balance(user.user_id, summ, operation='subtract')
		txt = f"üí∏ {user.url}, –Ω–µ –ø–æ–≤–µ–∑–ª–æ... –ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ {win2}, –∏ –≤–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ -{tr(summ)}$. {lose}"
	
	msg = await message.answer("ü™ô | –ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É... –∑–∞—Ç–∞–∏–º –¥—ã—Ö–∞–Ω–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–ª–æ!")
	await asyncio.sleep(2)
	await msg.edit_text(text=txt)


@antispam
async def fishing(message: types.Message, user: BFGuser):
	summ = await game_check(message, user, index=1)
	
	if not summ:
		return
	
	wins = [
		"üé£üêü | –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–≥–æ –ª–æ—Å–æ—Å—è, –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üê† | –£—Ä–∞! –í—ã –ø–æ–π–º–∞–ª–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –∫–∞—Ä–ø–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üê° | –ë—Ä–∞–≤–æ! –í–∞–º –ø–æ–ø–∞–ª—Å—è —Ä–µ–¥–∫–∏–π –º–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üê¨ | –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–π–º–∞–ª–∏ –¥–µ–ª—å—Ñ–∏–Ω–∞, –∏ –∑–∞ —ç—Ç–æ –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£ü¶à | –í–∞—É! –í–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å –∞–∫—É–ª—É, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£ü¶ë | –ó–¥–æ—Ä–æ–≤–æ! –í—ã –ø–æ–π–º–∞–ª–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–º–∞—Ä–∞, –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üêä | –£—Å–ø–µ—Ö! –í—ã –ø–æ–π–º–∞–ª–∏ –∞–ª–ª–∏–≥–∞—Ç–æ—Ä–∞, –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£ü¶ê | –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å —Ä–µ–¥–∫—É—é –∫—Ä–µ–≤–µ—Ç–∫—É, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üêö | –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –Ω–∞—à–ª–∏ –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–∫—É—à–∫—É, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$",
		"üé£üêã | –£—Ä–∞! –í—ã –ø–æ–π–º–∞–ª–∏ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –∫–∏—Ç–∞, –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {}$"
	]
	
	losses = [
		"üé£ü™± | –£–ø—Å! –í–∞—à–∏ –Ω–∞–∂–∏–≤–∫–∏ –±—ã–ª–∏ —Å—ä–µ–¥–µ–Ω—ã —á–µ—Ä–≤–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
		"üé£üåø | –£–≤—ã! –í—ã –ø–æ–π–º–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤–æ–¥–æ—Ä–æ—Å–ª–∏. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!",
		"üé£üóëÔ∏è | –ö–∞–∫–æ–π –∫–æ—à–º–∞—Ä! –í—ã –≤—ã—Ç–∞—â–∏–ª–∏ —Å—Ç–∞—Ä—É—é –∏–≥—Ä—É—à–∫—É. –ü–æ—Ä–∞ –º–µ–Ω—è—Ç—å –º–µ—Å—Ç–æ!",
		"üé£üê¢ | –û–π! –í–∞–º –ø–æ–ø–∞–ª–∞—Å—å —á–µ—Ä–µ–ø–∞—Ö–∞. –û–Ω–∞ —è–≤–Ω–æ –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.",
		"üé£üêç | –û –Ω–µ—Ç! –í–º–µ—Å—Ç–æ —Ä—ã–±—ã –≤—ã –ø–æ–π–º–∞–ª–∏ –∑–º–µ—é. –õ—É—á—à–µ –æ—Ç–ø—É—Å—Ç–∏—Ç–µ –µ–µ!",
		"üé£üåßÔ∏è | –£–≤—ã! –ù–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å, –∏ —Ä—ã–±–∞–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ!",
		"üé£üåä | –û, –Ω–µ—Ç! –í–æ–ª–Ω—ã —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–µ, –≤–∞–º –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –±–µ—Ä–µ–≥.",
		"üé£üê∏ | –£–ø—Å! –í–º–µ—Å—Ç–æ —Ä—ã–±—ã –≤—ã –ø–æ–π–º–∞–ª–∏ –ª—è–≥—É—à–∫—É. –ù–µ –±–µ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
		"üé£üéà | –û –Ω–µ—Ç! –í–∞—à–∞ –Ω–∞–∂–∏–≤–∫–∞ —É–ª–µ—Ç–µ–ª–∞ –≤ –æ–±–ª–∞–∫–∞! –≠—Ç–æ –Ω–µ –≤–∞—à –¥–µ–Ω—å.",
		"üé£üõ∂ | –£–≤—ã! –í–∞—à–∞ –ª–æ–¥–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞ –≤ –∫–∞–º—ã—à–∞—Ö. –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–º–æ—á—å!"
	]
	
	chance = random.random()
	
	if chance < 0.45:
		su = int(summ * 0.5)
		txt = random.choice(wins).format(tr(su))
		await update_balance(user.user_id, su, operation='add')
	elif chance < 0.5:
		txt = 'üé£‚ùé | –í—ã –∑–∞–±—ã–ª–∏ —É–¥–æ—á–∫—É...  –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å.'
	else:
		txt = random.choice(losses)
		await update_balance(user.user_id, summ, operation='subtract')
	
	msg = await message.answer("üé£ | –ó–∞–∫–∏–¥—ã–≤–∞–µ–º —É–¥–æ—á–∫—É... –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –∂–¥–µ—Ç –Ω–∞—Å –Ω–∞ –¥–Ω–µ!")
	await asyncio.sleep(2)
	await msg.edit_text(text=txt)


@antispam
async def roulette_ruless(message: types.Message, user: BFGuser):
	await message.answer(f'''<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–≥—Ä–µ –≤ —Ä—É–ª–µ—Ç–∫—É</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:
–ö (–∫—Ä–∞—Å–Ω–æ–µ): –°—Ç–∞–≤–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞. (x2)
–ß (—á–µ—Ä–Ω–æ–µ): –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. (x2)
–ß–µ—Ç: –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞. (x2)
–ù–µ—á–µ—Ç: –°—Ç–∞–≤–∫–∞ –Ω–∞ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞. (x2)
1-12, 12-26, 26-36: –°—Ç–∞–≤–∫–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∏—Å–µ–ª.(x3)
1-36: –°—Ç–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 36 (x36)

–ü—Ä–∏–º–µ—Ä: —Ä—É–ª–µ—Ç–∫–∞ –∫ 100''')


bets_ruletka = ['–∫', '—á', '—á–µ—Ç', '–Ω–µ—á–µ—Ç', '1-12', '12-26', '26-36'] + [str(i) for i in range(1, 37)] + ['0']

colors_ruletka = {0: '–∑'}
for i in range(1, 37):
	colors_ruletka[i] = '–∫' if i % 2 != 0 else '—á'

stickers_ruletka = {
	'–∫': [
		'CAACAgIAAxkBAAEMk7FmqmZgtnl1R-JkJEwRfQLdNz6ZLAACFyAAAq8VIEsjVUg0lrkmmTUE',
		'CAACAgIAAxkBAAEMk7tmqm_BKqgUdm0dKwAB0Yh5ZRevxl8AAtMhAALqFBhLET8AAYNDnvm4NQQ',
		'CAACAgIAAxkBAAEMk79mqm_1R3Mh3RyD6uqVvrSVfugZ8wACWCUAAqqoGUvWgNnF1LMYKDUE',
		'CAACAgIAAxkBAAEMk8NmqnAjvnSr8xyq8EB9G6Nlp2EQNgACgR4AAlrOGUurvYiC23KzDDUE',
		'CAACAgIAAxkBAAEMk8dmqnBR9SBNjL-dtR1yP60ueQFDSwACXSEAAmlUGEt80Rcq4SL85jUE',
		'CAACAgIAAxkBAAEMk8tmqnCORfasBPHzh1PuGeNV68VgzQACNSQAAgZiGEtbqp5yJJxuGTUE'
	],
	'–∑': [
		'CAACAgIAAxkBAAEMk61mqmY5j0d_UEDae0AvfvKZEoax8wACZhkAApC9IUtsfJ-2uiU4izUE'
	],
	'—á': [
		'CAACAgIAAxkBAAEMk69mqmZZF10-ZR9YxY4qXR1j2scK-AACEx0AArcIGUuEI9r6o_yNuTUE',
		'CAACAgIAAxkBAAEMk7lmqm9lkP4C2hk0qtpEU8JIOmG-GwACkxwAAugyGUvna4QpJ1UJGzUE',
		'CAACAgIAAxkBAAEMk71mqm_WQqPVyzrWfQIjBQWNYBaQ-gACRikAAhU5GUuFKr8wGVrZzjUE',
		'CAACAgIAAxkBAAEMk8FmqnALUmlANSfVHxp4AWxo1xkS1gACsiEAAuZFGEtTID7Mrd681DUE',
		'CAACAgIAAxkBAAEMk8VmqnA8oe2QlJCIhVJLdZRBCR2iQQAC2CIAAmSNGEs-Z2XuB7CSjjUE',
		'CAACAgIAAxkBAAEMk8lmqnBzJE7zX9et0fimZsrRsTvAFgACtiEAAjIZGUsIhaOXuETEMzUE'
	]
}


@antispam
async def roulette(message: types.Message, user: BFGuser):
	win, lose = BFGconst.emj()
	summ = await game_check(message, user, index=2)
	
	if not summ:
		return
	
	try:
		bet = message.text.lower().split()[1]
		if bet not in bets_ruletka:
			await message.answer(f'{user.url}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É {lose}')
			return
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã {lose}')
		return
	
	if bet in ['–∫', '—á']:
		win_conditions = [i for i in range(1, 37) if colors_ruletka[i] == ('–∫' if bet == '–∫' else '—á')]
	elif bet == '—á–µ—Ç':
		win_conditions = [i for i in range(1, 37) if i % 2 == 0]
	elif bet == '–Ω–µ—á–µ—Ç':
		win_conditions = [i for i in range(1, 37) if i % 2 != 0]
	elif bet in ['1-12', '13-24', '25-36']:
		start, end = map(int, bet.split('-'))
		win_conditions = list(range(start, end + 1))
	else:
		win_conditions = [int(bet)]
	
	winning_number = random.randint(0, 36)
	win = winning_number in win_conditions
	
	color = colors_ruletka[winning_number]
	stxt = 'üî¥ –ö—Ä–∞—Å–Ω—ã–π' if color == '–∫' else ('‚ö´Ô∏è –ß–µ—Ä–Ω—ã–π' if color == '—á' else 'üü¢ –ó–µ–ª–µ–Ω—ã–π')
	
	if win:
		multiplier = 2 if bet in ['–∫', '—á', '—á–µ—Ç', '–Ω–µ—á–µ—Ç'] else (3 if bet in ['1-12', '13-24', '25-36'] else 36)
		su = int(summ * multiplier)
		txt = f"{user.url}, —à–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number} ({stxt}). –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {tr(su)}$"
		await update_balance(user.user_id, su, operation='add')
	else:
		txt = f"{user.url}, —à–∞—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {winning_number} ({stxt}). –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ -{tr(summ)}$"
		await update_balance(user.user_id, summ, operation='subtract')
	
	sticker = random.choice(stickers_ruletka[color])
	msg = await bot.send_sticker(message.chat.id, sticker=sticker)
	await asyncio.sleep(2)
	await message.answer(txt, reply=msg.message_id)


@antispam
async def crash(message: types.Message, user: BFGuser):
	win, lose = BFGconst.emj()
	summ = await game_check(message, user, index=1)
	
	if not summ:
		return
	
	try:
		bet = round(float(message.text.lower().split()[2]), 2)
		if not (1.01 <= bet <= 10):
			await message.answer(f'''ü•∂ {user.url}, <i>—Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</i>
<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>
üìà <b>–ö—Ä–∞—à [—Å—Ç–∞–≤–∫–∞] [1.01-10]</b>

–ü—Ä–∏–º–µ—Ä: <code>–∫—Ä–∞—à 100 1.1</code>
–ü—Ä–∏–º–µ—Ä: <code>–∫—Ä–∞—à 100 4</code>''')
			return
		
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã {lose}')
		return
	
	bet2 = bet+1 if bet < 4 else (bet+3 if bet <= 7 else 10)
	rnumber = round(random.uniform(1.01, bet2), 2)
	
	if bet < rnumber:
		summ = int(bet*summ)
		await message.answer(f'üöÄ {user.url}, —Ä–∞–∫–µ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ x{rnumber} üìà\n‚úÖ –¢—ã –≤—ã–∏–≥—Ä–∞–ª! –¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª {tr(summ)}$')
		await update_balance(user.user_id, summ, operation='add')
	else:
		await message.answer(f'üöÄ {user.url}, —Ä–∞–∫–µ—Ç–∞ —É–ø–∞–ª–∞ –Ω–∞ x{rnumber} üìâ\n‚ùå –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {tr(summ)}$')
		await update_balance(user.user_id, summ, operation='subtract')
	

def register_handlers(dp: Dispatcher):
	dp.register_message_handler(oxota, lambda message: message.text.lower().startswith('–æ—Ö–æ—Ç–∞'))
	dp.register_message_handler(monetka, lambda message: message.text.lower().startswith('–º–æ–Ω–µ—Ç–∫–∞'))
	dp.register_message_handler(fishing, lambda message: message.text.lower().startswith('—Ä—ã–±–∞–ª–∫–∞'))
	dp.register_message_handler(roulette_ruless, lambda message: message.text.lower() == '—Ä—É–ª–µ—Ç–∫–∞')
	dp.register_message_handler(roulette, lambda message: message.text.lower().startswith('—Ä—É–ª–µ—Ç–∫–∞'))
	dp.register_message_handler(crash, lambda message: message.text.lower().startswith('–∫—Ä–∞—à'))


MODULE_DESCRIPTION = {
	'name': 'üéÆ –ù–æ–≤—ã–µ –∏–≥—Ä—ã',
	'description': '–ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∏–≥—Ä—ã:\n- –ú–æ–Ω–µ—Ç–∫–∞\n- –û—Ö–æ—Ç–∞\n- –†—ã–±–∞–ª–∫–∞\n- –†—É–ª–µ—Ç–∫–∞\n - –ö—Ä–∞—à'
}