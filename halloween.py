import asyncio
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from assets.transform import transform_int as tr
from decimal import Decimal
from assets.antispam import antispam
from datetime import datetime
from bot import bot
import time
import sqlite3
import random

from commands import db as gdb
from commands.db import conn as conngdb, cursor as cursorgdb

from commands.main import CONFIG as HELLO_CONFIG
from commands.help import CONFIG as HELP_CONFIG

atacktime = dict()


async def atack_time(id):
	utime = 60
	dnow = datetime.now()
	last = atacktime.get(id)

	if not last:
		atacktime[id] = dnow
		last = datetime.fromtimestamp(0)
	if last:
		delta_seconds = (dnow - last).total_seconds()
		sl = int(utime - delta_seconds)

		if sl > 0:
			left = sl
			return 1, left
		else:
			atacktime[id] = dnow
			return 0, 0


MONSTERS = [
	('–í–Ü–î–¨–ú–ê', 500, 'https://img.freepik.com/premium-photo/scary-halloween-witch-with-pumpkin-smoke-dark-background_924727-4391.jpg'),
	('–û–ë–û–†–û–¢–ï–ù–¨', 350, 'https://img1.akspic.ru/crops/8/8/6/3/4/143688/143688-uzhas-art-illustracia-psovye-vampir-1920x1080.jpg'),
	('–ó–õ–ê–Ø –¢–´–ö–í–ê', 150, 'https://img.goodfon.ru/original/1920x1408/7/36/halloween-evil-pumpkins-bats-4911.jpg'),
	('–ü–†–ò–ó–†–ê–ö', 750, 'https://png.pngtree.com/thumb_back/fw800/background/20230611/pngtree-halloween-ghost-wallpaper-4k-5k-image_2927454.jpg'),
	('–†–£–ö–ê', 50, 'https://jump24.com.ua/content/images/15/480x480l50nn0/ruka-z-serialu-wednesday-uensdei-thing-rich-z-lateksu-sv2522-32770514615611.png'),
	('–ü–ò–†–ê–¢', 222, 'https://www.nme.com/wp-content/uploads/2022/09/Sea-Of-Thieves.jpg')
	
]

MONSTER = {'name': '', 'hp': 0, 'time': 0, 'url': '', 'max_hp': 0}


class Database:
	def __init__(self):
		self.conn = sqlite3.connect('modules/halloween.db')
		self.cursor = self.conn.cursor()
		self.create_tables()

	def create_tables(self):
		self.cursor.execute('''
			CREATE TABLE IF NOT EXISTS users (
				user_id INTEGER,
				candies INTEGER DEFAULT '0',
				mask INTEGER DEFAULT '3',
				pumpkins INTEGER DEFAULT '0'
			)''')
		self.conn.commit()
		
	async def reg_user(self, user_id):
		ex = self.cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,)).fetchone()
		if not ex:
			self.cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
			self.conn.commit()
			
	async def get_balance(self, user_id):
		await self.reg_user(user_id)
		return self.cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
	
	async def upd_candies(self, user_id, summ):
		await self.reg_user(user_id)
		self.cursor.execute('UPDATE users SET candies = candies + ? WHERE user_id = ?', (summ, user_id))
		self.conn.commit()
		
	async def upd_pumpkins(self, user_id, summ):
		await self.reg_user(user_id)
		self.cursor.execute('UPDATE users SET pumpkins = pumpkins + ? WHERE user_id = ?', (summ, user_id))
		self.conn.commit()
		
	async def upd_mask(self, user_id, summ):
		await self.reg_user(user_id)
		self.cursor.execute('UPDATE users SET mask = mask + ? WHERE user_id = ?', (summ, user_id))
		self.conn.commit()
		
	async def upd_money(self, user_id, summ):
		await self.reg_user(user_id)
		balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]
		new_balance = Decimal(str(balance)) + Decimal(str(summ))
		new_balance = "{:.0f}".format(new_balance)
		cursorgdb.execute('UPDATE users SET balance = ? WHERE user_id = ?', (new_balance, user_id))
		conngdb.commit()
		
	async def upd_ecoins(self, user_id, summ):
		await self.reg_user(user_id)
		cursorgdb.execute('UPDATE users SET ecoins = ecoins + ? WHERE user_id = ?', (summ, user_id))
		conngdb.commit()


def edit_halloween_message():
	HELLO_CONFIG['sticker_id'] = [
		'CAACAgIAAxkBAAEM6yhnAAEa69j7Y4Dk8dz_3nWvaHPDNkYAAssCAAJWnb0KT093_26cvR02BA',
		'CAACAgIAAxkBAAEM6ypnAAEbBN3gbp6Z1VogNIEIaI06VeIAAswAAzDUnRG4NAgyDgkxzDYE',
		'CAACAgIAAxkBAAEM6yxnAAEbaL52iMg8wNb-Wcws3OVZYv8AAhoAAw220hmJ4kTBILxkLzYE',
		'CAACAgIAAxkBAAEM6y5nAAEbap_g2uAS40mfo18ufDSB7KsAArcAAzDUnRGaP4Ps5KISTzYE',
		'CAACAgIAAxkBAAEM6zBnAAEbbpwDjXb_P-IdnsGMY-M9FdgAAlUAA8A2TxMidkHNKTnRTTYE'
	]
	
	HELLO_CONFIG['hello_text'] = HELLO_CONFIG['hello_text'].replace('ü§ñ', 'üëª').replace('üíô', 'üéÉ')
	HELLO_CONFIG['hello_text2'] = HELLO_CONFIG['hello_text2'].replace('üöÄ', 'üòà')
	HELP_CONFIG['help_cmd'] = HELP_CONFIG['help_cmd'].replace('üí¨', 'üëΩ')
	HELP_CONFIG['help_game'] += '\n   üëª –î–∂–µ–∫–ø–æ—Ç'
	

def new_monster():
	global MONSTER
	monster = MONSTER['name']
	while True:
		new_monster = random.choice(MONSTERS)
		if monster != new_monster[0]:
			break
	
	ntime = int(time.time()) + 3600
	MONSTER	= {'name': new_monster[0], 'hp': new_monster[1], 'time': ntime, 'url': new_monster[2], 'max_hp': new_monster[1]}


db = Database()
new_monster()


def atack_kb():
	keyboards = InlineKeyboardMarkup(row_width=1)
	keyboards.add(InlineKeyboardButton("üî´ –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="event-monster-atack"))
	return keyboards


def format_time(seconds):
	seconds = seconds - int(time.time())
	
	def pluralize(value, singular, plural1, plural2):
		if value % 10 == 1 and value % 100 != 11:
			return f"{value} {singular}"
		elif 2 <= value % 10 <= 4 and (value % 100 < 10 or value % 100 >= 20):
			return f"{value} {plural1}"
		else:
			return f"{value} {plural2}"

	if seconds >= 60:
		minutes = seconds // 60
		return pluralize(minutes, "–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç")
	else:
		return pluralize(seconds, "—Å–µ–∫—É–Ω–¥–∞", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥")
	
	
async def check_monster():
	if time.time() > MONSTER['time'] or MONSTER['hp'] <= 0:
		new_monster()
	

@antispam
async def bag(message: types.Message):
	user_id = message.from_user.id
	name = await gdb.url_name(user_id)
	data = await db.get_balance(user_id)
	await message.answer(f'{name}, –≤ –≤–∞—à–µ–º –º–µ—à–æ—á–∫–µ:\nüç¨ –ö–æ–Ω—Ñ–µ—Ç—ã: {data[1]}\nüéÉ –¢—ã–∫–≤—ã: {data[3]}\nüé≠ –ú–∞—Å–∫–∏: {data[2]}')
	

@antispam
async def monster(message: types.Message):
	await check_monster()
	txt = f'''<b>üëª –ú–æ–Ω—Å—Ç—Ä {MONSTER['name']}</b>
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {MONSTER['hp']}/{MONSTER['max_hp']}
‚åõÔ∏è –î–æ —Å–º–µ–Ω—ã –º–æ–Ω—Å—Ç—Ä–∞: {format_time(MONSTER['time'])}'''
	await bot.send_photo(message.chat.id, photo=MONSTER['url'], caption=txt, reply_markup=atack_kb())
	

async def atack(call: types.CallbackQuery):
	user_id = call.from_user.id
	name = await gdb.url_name(user_id)
	status, time = await atack_time(user_id)
	await check_monster()
	
	if status == 1:
		await bot.answer_callback_query(call.id, text=f'üëª –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {time} —Å–µ–∫—É–Ω–¥.')
		return
	
	txt = ''
	hp = random.randint(1, 3)
	MONSTER['hp'] = MONSTER['hp'] - hp
	
	await bot.answer_callback_query(call.id, text='')
	
	if MONSTER['hp'] <= 0:
		await call.message.answer(f'{name}, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞!\n–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 3üéÉ')
		await db.upd_pumpkins(user_id, 3)
		new_monster()
	else:
		if random.randint(1, 3) == 1:
			candy = random.randint(1, 3)
			await db.upd_candies(user_id, candy)
			txt = f', +{candy}üç¨'
			
		await call.message.answer(f'{name}, –≤—ã –Ω–∞–Ω–µ—Å–ª–∏ —É–¥–∞—Ä –ø–æ –º–æ–Ω—Å—Ç—Ä—É!\n-{hp}‚ù§Ô∏è{txt}')
		
		
@antispam
async def startle(message: types.Message):
	user_id = message.from_user.id
	name = await gdb.url_name(user_id)
	info = await db.get_balance(user_id)
	
	if info[2] <= 0:
		await message.answer(f'üò¢ {name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Å–æ–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è. –ù–∞–π–¥–∏—Ç–µ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ!')
		return
	
	if not message.reply_to_message:
		await message.answer(f'{name}, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üëª')
		return
	
	win_messages = [
		'ü´® –ë–£-–ì–ê-–ì–ê! –í–∞—Å –Ω–∞–ø—É–≥–∞–ª –∏–≥—Ä–æ–∫ {}!',
		'üò± –£–• –¢–´! {} –≤—ã–ø—Ä—ã–≥–Ω—É–ª –∏–∑-–∑–∞ —É–≥–ª–∞ –∏ –∏—Å–ø—É–≥–∞–ª –≤–∞—Å!',
		'üëª –û–ô! {} –ø—Ä–æ–∏–∑–Ω–µ—Å: "–ë–£!" –∏ –≤—ã –µ–¥–≤–∞ –Ω–µ —É–ø–∞–ª–∏ –æ—Ç —Å—Ç—Ä–∞—Ö–∞!',
		'üò® –ë–£-–ì–ê-–ì–ê! {} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ—è–≤–∏–ª—Å—è —Ä—è–¥–æ–º –∏ –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å –≤–∑–¥—Ä–æ–≥–Ω—É—Ç—å!',
		'ü§Ø –í–ê–£! {} –Ω–∞–ø—É–≥–∞–ª –≤–∞—Å –¥–æ –º—É—Ä–∞—à–µ–∫ —Å–≤–æ–∏–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ—è–≤–ª–µ–Ω–∏–µ–º!',
		'ü´£ –û-–û! {} –≤—ã—Å–∫–æ—á–∏–ª –∏–∑-–∑–∞ —É–≥–ª–∞ —Å –∫—Ä–∏–∫–æ–º –∏ –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å —Ç—Ä—è—Å—Ç–∏—Å—å –æ—Ç —Å—Ç—Ä–∞—Ö–∞!',
		'ü´• –•–û–ü! {} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ–±—ä—è–≤–∏–ª—Å—è –∏ –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å –≤—Å–∫—Ä–∏–∫–Ω—É—Ç—å –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏!',
		'üò≥ –£–ñ–ê–°! {} –∑–∞–∫—Ä–∏—á–∞–ª "–ë–£!" –∏ –≤—ã —á—É—Ç—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ!',
		'ü§≠ –•–ê-–•–ê! {} –Ω–∞–ø—É–≥–∞–ª –≤–∞—Å –¥–æ —Å–º–µ—Ä—Ç–∏! –£–¥–∞—á–Ω–æ —Å—ã–≥—Ä–∞–Ω–æ!'
	]
	
	lose_messages = [
		'üòÖ –£–ø—Å! {} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –Ω–æ –≤—ã –ª–∏—à—å —É—Å–º–µ—Ö–Ω—É–ª–∏—Å—å!',
		'üòè –û–π! {} –∫—Ä–∏—á–∞–ª "–ë–£!", –Ω–æ —ç—Ç–æ –≤—ã–∑–≤–∞–ª–æ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ —É–ª—ã–±–∫—É!',
		'üòÇ –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! {} –∏—Å–ø—É–≥–∞–ª —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è!',
		'üòÜ –í—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–µ—è–ª–∏—Å—å! {} –ø—ã—Ç–∞–ª—Å—è –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –Ω–æ –µ–≥–æ –∫—Ä–∏–∫–∏ –∑–≤—É—á–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –∑–∞–±–∞–≤–Ω–æ!',
		'ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å! {} —Ç–∞–∫ –∏ –Ω–µ —Å–º–æ–≥ –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –¥–∞–∂–µ —Å –∫—Ä–∏–∫–∞–º–∏ "–ë–£!"',
		'üôà –•–∞-—Ö–∞! {} —Ö–æ—Ç–µ–ª –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –Ω–æ –≤—ã –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –∏ —É—à–ª–∏!',
		'üòú –û–π, –Ω–µ —Ç–∞–∫-—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—É–≥–∞—Ç—å –≤–∞—Å! {} –∑—Ä—è —Å—Ç–∞—Ä–∞–ª—Å—è!',
		'üôÉ –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! {} –ø–æ—Ç—Ä–∞—Ç–∏–ª –º–Ω–æ–≥–æ —Å–∏–ª, –Ω–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–≤–æ–∑–º—É—Ç–∏–º—ã',
		'ü§≠ –ó–∞—Ç–æ —ç—Ç–æ –±—ã–ª–æ –≤–µ—Å–µ–ª–æ! {} –ø—ã—Ç–∞–ª—Å—è –≤–∞—Å –Ω–∞–ø—É–≥–∞—Ç—å, –Ω–æ –≤—ã –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–º–µ—è–ª–∏—Å—å!',
	]
	
	if random.random() < 0.5:
		msg = random.choice(win_messages) + f'\n\n<i>–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1üéÉ</i>'
		await db.upd_pumpkins(user_id, 1)
	else:
		msg = random.choice(lose_messages)
	
	await message.answer(msg.format(name), reply=message.reply_to_message.message_id)
	await db.upd_mask(user_id, -1)
	
	
@antispam
async def shop(message: types.Message):
	user_id = message.from_user.id
	name = await gdb.url_name(user_id)
	await message.answer(f'''{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω:

–ú–∞—Å–∫–∏: 25üç¨ - 1üé≠
–î–µ–Ω—å–≥–∏: 1üç¨ - 1–µ5$

‚ùóÔ∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ:
–ö—É–ø–∏—Ç—å –º–∞—Å–∫—É (–∫–æ–ª-–≤–æ)
–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–µ—Ç—ã (–∫–æ–ª-–≤–æ)''')


@antispam
async def buy(message: types.Message):
	user_id = message.from_user.id
	name = await gdb.url_name(user_id)
	info = await db.get_balance(user_id)
	
	try:
		summ = int(message.text.split()[2])
	except:
		return
	
	if summ <= 0:
		return
	
	if message.text.lower().startswith('–∫—É–ø–∏—Ç—å'):
		summ2 = summ * 25
		if summ2 > info[1]:
			await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–µ—Ç üò≥')
			return
		
		await db.upd_mask(user_id, summ)
		await db.upd_candies(user_id, (summ2*-1))
		await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {summ}üé≠ –∑–∞ {summ2}üç¨')
	else:
		if summ > info[1]:
			await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–µ—Ç üò≥')
			return
		
		summ2 = summ * 1000000
		await db.upd_candies(user_id, (summ*-1))
		await db.upd_money(user_id, summ2)
		await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {summ}üç¨ –Ω–∞ {tr(summ2)}$ üëª')


@antispam
async def jackpot(message: types.Message):
	user_id = message.from_user.id
	name = await gdb.url_name(user_id)
	info = await db.get_balance(user_id)
	
	if info[3] <= 0:
	    await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç—É —Ç—ã–∫–æ–≤–æ–∫ üëª')
	    return
	
	await db.upd_pumpkins(user_id, -1)
	
	rewards = {'üí∏': 0, 'üç¨': 0, 'üé≠': 0, 'üí≥': 0}
	emoji_list = ['üí∏', 'üç¨', 'üé≠', 'üí≥']
	emoji_weights = [70, 20, 8, 2]
	
	emojis = random.choices(emoji_list, weights=emoji_weights, k=3)
	
	for emj in emojis:
		if emj == 'üí∏':
			rewards['üí∏'] += 1000000000000
		elif emj == 'üç¨':
			rewards['üç¨'] += 50
		elif emj == 'üé≠':
			rewards['üé≠'] += 3
		elif emj == 'üí≥':
			rewards['üí≥'] += 1
	
	txt = ''
	if rewards['üí∏'] > 0:
		txt += f'\n+{tr(rewards["üí∏"])}$ üí∞'
		await db.upd_money(user_id, rewards["üí∏"])
	if rewards['üç¨'] > 0:
		txt += f'\n+{rewards["üç¨"]}üç¨'
		await db.upd_candies(user_id, rewards["üç¨"])
	if rewards['üé≠'] > 0:
		txt += f'\n+{rewards["üé≠"]}üé≠'
		await db.upd_mask(user_id, rewards["üé≠"])
	if rewards['üí≥'] > 0:
		txt += f'\n+{rewards["üí≥"]}üí≥ B-coin'
		await db.upd_ecoins(user_id, rewards["üí≥"])
	
	msg = await message.reply(f"{name}, ‚ùì|‚ùì|‚ùì")
	
	try:
		for i in range(0, 3):
			await asyncio.sleep(0.45)
			new_text = f'{name}, ' + '|'.join(emojis[:i + 1] + ['‚ùì'] * (len(emojis) - (i + 1)))
			await msg.edit_text(new_text)
		
		await asyncio.sleep(0.8)
		await msg.edit_text(f"{name}, {'|'.join(emojis)}\n<i>{txt}</i>")
	except:
		await message.reply(f"{name}, {'|'.join(emojis)}\n<i>{txt}</i>")
	
	
@antispam
async def event(message: types.Message):
	await message.answer(f'''<b>–ò–≤–µ–Ω—Ç –•—ç–ª–ª–æ—É–∏–Ω üéÉ</b>
<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –•—ç–ª–ª–æ—É–∏–Ω—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ! –ñ—É—Ç–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å, –∏ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –∑–∞–¥–∞–Ω–∏—è—Ö. –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å!</i>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>

üéÉ <b>–¢—ã–∫–≤–µ–Ω–Ω–∞—è –õ–æ—Ç–µ—Ä–µ—è</b> (<code>–î–∂–µ–∫–ø–æ—Ç</code>)
–ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É! –í –ª–æ—Ç–µ—Ä–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –¥–µ–Ω—å–≥–∏, –∫–æ–Ω—Ñ–µ—Ç—ã, B-coins üé≠. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—É—à!

üëπ <b>–ü–æ–±–µ–¥–∏ –º–æ–Ω—Å—Ç—Ä–∞</b> (<code>–ú–æ–Ω—Å—Ç—Ä</code>)
–í—Å—Ç—Ä–µ—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–æ—Ñ–µ–∏!

üç¨ <b>–û–±–º–µ–Ω –∫–æ–Ω—Ñ–µ—Ç</b> (<code>–ú–∞–≥–∞–∑–∏–Ω</code>)
–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ç—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ. –ß–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ñ–µ—Ç, —Ç–µ–º —Ü–µ–Ω–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥—ã!

üëª <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–≥–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤</b> (<code>–ù–∞–ø—É–≥–∞—Ç—å</code>)
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—à–Ω—ã–µ –º–∞—Å–∫–∏, —á—Ç–æ–±—ã –ø—É–≥–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã!''')


def register_handlers(dp: Dispatcher):
	dp.register_message_handler(bag, lambda message: message.text.lower() == '–º–µ—à–æ–∫')
	dp.register_message_handler(monster, lambda message: message.text.lower() == '–º–æ–Ω—Å—Ç—Ä')
	dp.register_callback_query_handler(atack, text_startswith='event-monster-atack')
	dp.register_message_handler(startle, lambda message: message.text.lower() == '–Ω–∞–ø—É–≥–∞—Ç—å')
	dp.register_message_handler(shop, lambda message: message.text.lower() == '–º–∞–≥–∞–∑–∏–Ω')
	dp.register_message_handler(buy, lambda message: message.text.lower().startswith(('–∫—É–ø–∏—Ç—å –º–∞—Å–∫—É', '–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–µ—Ç—ã')))
	dp.register_message_handler(jackpot, lambda message: message.text.lower() == '–¥–∂–µ–∫–ø–æ—Ç')
	dp.register_message_handler(event, lambda message: message.text.lower() == '—Ö—ç–ª–ª–æ—É–∏–Ω')
	edit_halloween_message()


MODULE_DESCRIPTION = {
	'name': 'üëª Halloween',
	'description': '''–ò–≤–µ–Ω—Ç-–º–æ–¥—É–ª—å —Ö—ç–ª–ª–æ—É–∏–Ω:
- –ù–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
- –ù–æ–≤—ã–π –∏–≤–µ–Ω—Ç "–º–æ–Ω—Å—Ç—Ä—ã"
- –ù–æ–≤–∞—è –∏–≥—Ä–∞
- –ù–æ–≤—ã–µ –∏–≥—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã

* –ú–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
* –ü–æ–º–æ—â—å—é –ø–æ –º–æ–¥—É–ª—é –≤–≤–µ–¥–∏—Ç–µ "—Ö–µ–ª–ª–æ—É–∏–Ω"'''
}